{"version":3,"sources":["components/Form.js","components/FilterButton.js","components/Todo.js","App.js","index.js"],"names":["Form","props","useState","name","setName","onSubmit","e","preventDefault","addTask","className","htmlFor","class","type","id","autoComplete","value","onChange","target","placeholder","FilterButton","aria-pressed","isPressed","onClick","setFilter","Todo","isEditing","setEditing","newName","setNewName","editingTemplate","editTask","viewTemplate","defaultChecked","completed","toggleTaskCompleted","deleteTask","FILTER_MAP","All","Active","task","Completed","FILTER_NAMES","Object","keys","App","tasks","setTasks","filter","updatedTasks","map","editedTaskList","taskList","filterList","remainingTasks","tasksNoun","length","headingText","newTask","nanoid","role","aria-labelledby","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3489f21f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nfunction Form(props) {\n  const [name, setName] = useState(\"\");\n\n  function handleChange(e) {\n    setName(e.target.value);\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    props.addTask(name);\n    setName(\"\");\n  }\n  return (\n    <form onSubmit={handleSubmit}>\n      <h1 className=\"label-wrapper\">\n        <label htmlFor=\"new-todo-input\">\n          What needs to be done?\n        </label>\n      </h1>\n      <div class=\"input-ui\">\n      <input\n        type=\"text\"\n        id=\"new-todo-input\"\n        className=\"input input__lg\"\n        name=\"text\"\n        autoComplete=\"off\"\n        value={name}\n        onChange={handleChange}\n        placeholder=\"Add new task here...\"\n      />\n      <br/>\n      <button type=\"submit\" className=\"btn btn__primary btn__lg\">\n        Add\n      </button>\n      </div>\n    </form>\n  );\n}\n\nexport default Form;","import React from \"react\";\n\nfunction FilterButton(props) {\n  return (\n    <button\n      type=\"button\"\n      className=\"btn toggle-btn\"\n      aria-pressed={props.isPressed}\n      onClick={() => props.setFilter(props.name)}\n    >\n      <span className=\"visually-hidden\">Show </span>\n      <span>{props.name}</span>\n      <span className=\"visually-hidden\"> tasks</span>\n    </button>\n  );\n}\n\nexport default FilterButton;","import React, { useState } from \"react\";\n\n\nexport default function Todo(props) {\n  const [isEditing, setEditing] = useState(false);\n  const [newName, setNewName] = useState('');\n  function handleChange(e) {\n    setNewName(e.target.value);\n  }\n  function handleSubmit(e) {\n    e.preventDefault();\n    props.editTask(props.id, newName);\n    setNewName(\"\");\n    setEditing(false);\n  }\n  const editingTemplate = (\n    <form className=\"stack-small\" onSubmit={handleSubmit}>\n      <div className=\"form-group\">\n        <label className=\"todo-label\" htmlFor={props.id}>\n          New name for {props.name}\n        </label>\n        <input\n          id={props.id}\n          className=\"todo-text\"\n          type=\"text\"\n          value={newName}\n          onChange={handleChange}\n        />\n      </div>\n      <div className=\"btn-group\">\n      <button\n        type=\"button\"\n        className=\"btn todo-cancel\"\n        onClick={() => setEditing(false)}\n      >\n        Cancel\n        <span className=\"visually-hidden\">renaming {props.name}</span>\n      </button>\n        <button type=\"submit\" className=\"btn btn__primary todo-edit\">\n          Save\n          <span className=\"visually-hidden\">new name for {props.name}</span>\n        </button>\n      </div>\n    </form>\n  );\n  const viewTemplate = (\n    <div className=\"stack-small\">\n      \n      <div className=\"c-cb\">\n          <input\n            id={props.id}\n            type=\"checkbox\"\n            defaultChecked={props.completed}\n            onChange={() => props.toggleTaskCompleted(props.id)}\n          />\n          <label className=\"todo-label\" htmlFor={props.id}>\n            {props.name}\n          </label>\n        </div>\n        <div className=\"btn-group\">\n        <button type=\"button\" className=\"btn\" onClick={() => setEditing(true)}>\n          Edit <span className=\"visually-hidden\">{props.name}</span>\n        </button>\n          <button\n            type=\"button\"\n            className=\"btn btn__danger\"\n            onClick={() => props.deleteTask(props.id)}\n          >\n            Delete <span className=\"visually-hidden\">{props.name}</span>\n          </button>\n        </div>\n    </div>\n  );\n\n  return <li className=\"todo\">{isEditing ? editingTemplate : viewTemplate}</li>;\n\n  \n}","import React, { useState } from \"react\";\nimport Form from \"./components/Form\";\nimport FilterButton from \"./components/FilterButton\";\nimport Todo from \"./components/Todo\";\nimport { nanoid } from \"nanoid\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\n\nconst FILTER_MAP = {\n  All: () => true,\n  Active: task => !task.completed,\n  Completed: task => task.completed\n};\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\n\n\nfunction App(props) {\n  \n// is this line in the correct spot? https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_interactivity_events_state\n  const [tasks, setTasks] = useState(props.tasks);\n  const [filter, setFilter] = useState('All');\n\n\n  function addTask(name) {\n    const newTask = { id: \"todo-\" + nanoid(), name: name, completed: false };\n    setTasks([...tasks, newTask]);\n  }\n  function toggleTaskCompleted(id) {\n    const updatedTasks = tasks.map(task => {\n      // if this task has the same ID as the edited task\n      if (id === task.id) {\n        // use object spread to make a new object\n        // whose `completed` prop has been inverted\n        return {...task, completed: !task.completed}\n      }\n      return task;\n    });\n    setTasks(updatedTasks);\n  }\n\n  function editTask(id, newName) {\n    const editedTaskList = tasks.map(task => {\n    // if this task has the same ID as the edited task\n      if (id === task.id) {\n        //\n        return {...task, name: newName}\n      }\n      return task;\n    });\n    setTasks(editedTaskList);\n  }\n  const taskList = tasks\n  .filter(FILTER_MAP[filter])\n  .map(task => (\n    <Todo\n      id={task.id}\n      name={task.name}\n      completed={task.completed}\n      key={task.id}\n      toggleTaskCompleted={toggleTaskCompleted}\n      deleteTask={deleteTask}\n      editTask={editTask}\n    />\n  ));\n\n  const filterList = FILTER_NAMES.map(name => (\n    <FilterButton\n      key={name}\n      name={name}\n      isPressed={name === filter}\n      setFilter={setFilter}\n    />\n  ));\n\n  function deleteTask(id) {\n    const remainingTasks = tasks.filter(task => id !== task.id);\n    setTasks(remainingTasks);\n  }\n \n  const tasksNoun = taskList.length !== 1 ? 'tasks' : 'task';\nconst headingText = `${taskList.length} ${tasksNoun} remaining`;\n  return (\n    \n    <div className=\"todoapp stack-large\">\n      <br />\n      <Form addTask={addTask} />\n      <br /> <br />\n      <div className=\"filters btn-group stack-exception\">\n        {filterList}  \n      </div>\n      <h2 id=\"list-heading\">{headingText}</h2>\n      <ul\n        role=\"list\"\n        className=\"todo-list stack-large stack-exception\"\n        aria-labelledby=\"list-heading\"\n      >\n        {taskList}\n      </ul>\n    </div>\n    \n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nconst DATA = [\n    { id: \"todo-0\", name: \"Wear a mask\", completed: true },\n    { id: \"todo-1\", name: \"Work on project\", completed: false },\n    { id: \"todo-2\", name: \"Get a web dev job\", completed: false }\n  ];\n\n  ReactDOM.render(<App tasks={DATA} />, document.getElementById(\"root\"));\n"],"sourceRoot":""}